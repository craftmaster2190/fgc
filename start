#!/bin/bash

mydir="$PWD"

function pidOfPort() {
    lsof -Pi ":${1}" -sTCP:LISTEN -t
}

function clean() {
    cd "$mydir/server"
    ./gradlew clean
    cd "$mydir/client"
    mkdir "$mydir/build"
    yarn install 2>&1 | tee "$mydir/build/yarnInstall.log"
    cd "$mydir"
}

function frontEnd() {
    cd "$mydir/client"
    nohup yarn start <<</dev/null >"$mydir/build/frontEnd.log" 2>&1 &
    echo $! >"$mydir/build/frontEnd.pid"
    cd "$mydir"
}

function backEnd() {
    cd "$mydir/server"
    nohup ./gradlew bootRun <<</dev/null >"$mydir/build/backEnd.log" 2>&1 &
    echo $! >"$mydir/build/backEnd.pid"
    cd "$mydir"
}

echo "Cleaning..."
./stop
clean
frontEnd
backEnd

START_TIME=`date +%s`
echo -n 'Loading...'
while : ; do
    FRONT_END_STATUS="startup"
    if [ -f "$mydir/build/frontEnd.pid" ] ; then
        FRONT_END_STATUS="port 4200"
        if lsof -Pi :4200 -sTCP:LISTEN -t >/dev/null ; then
            FRONT_END_STATUS="ready"
        fi
    fi

    BACK_END_STATUS="startup"
    if [ -f "$mydir/build/backEnd.pid" ] ; then
        BACK_END_STATUS="port 8080"
        if lsof -Pi :8080 -sTCP:LISTEN -t >/dev/null ; then
            BACK_END_STATUS="ready"
        fi
    fi

    TIME_ELAPSED=$((`date +%s` - START_TIME))
    echo -n -e "\r\033[0K ${TIME_ELAPSED}s Waiting for FrontEnd: ${FRONT_END_STATUS} BackEnd: ${BACK_END_STATUS}"

    if [[ "${FRONT_END_STATUS}" = 'ready' ]] && [[ "${BACK_END_STATUS}" = 'ready' ]] ; then
        break;
    fi

    sleep 1
done
echo '';
